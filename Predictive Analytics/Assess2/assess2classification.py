# -*- coding: utf-8 -*-
"""assess2classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VlVRb1ux7ecqc144HM57wkq8WzCBwSw3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder,MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,ConfusionMatrixDisplay,recall_score,precision_score

df=pd.read_csv('/content/winequality-red.csv')

df.head()

df.info()

df.describe()

for column in df.select_dtypes(include = ['int64','float64']).columns:
  plt.figure(figsize=(8,5))
  sns.histplot(df[column])
  plt.title(f"Histogram of {column}")
  plt.xlabel(column)
  plt.ylabel("frequency")

# handle missing values
df.isnull().sum()

df['fixed acidity']=df['fixed acidity'].fillna(df['fixed acidity'].mean())
df['volatile acidity']=df['volatile acidity'].fillna(df['volatile acidity'].median())
df['citric acid']=df['citric acid'].fillna(df['citric acid'].median())
df['residual sugar']=df['residual sugar'].fillna(df['residual sugar'].median())
df['chlorides']=df['chlorides'].fillna(df['chlorides'].median())
df['free sulfur dioxide']=df['free sulfur dioxide'].fillna(df['free sulfur dioxide'].median())
df['sulphates']=df['sulphates'].fillna(df['sulphates'].mean())

df.isnull().sum()

df.duplicated().sum()

df=df.drop_duplicates()

df.duplicated().sum()

df['quality']=df['quality'].replace(5,0)
df['quality']=df['quality'].replace(3,0)
df['quality']=df['quality'].replace(4,0)
df['quality']=df['quality'].replace(6,0)
df['quality']=df['quality'].replace(7,1)
df['quality']=df['quality'].replace(8,1)

df.head()

import matplotlib.pyplot as plt
plt.boxplot(df['citric acid'])
plt.show()

df= df[df['citric acid']<0.8]
plt.boxplot(df['citric acid'])
plt.show()

df.dtypes
# no categorical values

df.columns

x=df[['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
       'pH', 'sulphates', 'alcohol']]
y=df['quality']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=0)

mn= MinMaxScaler()
x_train = mn.fit_transform(x_train)
x_test=mn.transform(x_test)

rf=RandomForestClassifier(n_estimators=100,random_state=42)
rf.fit(x_train,y_train)
y_pred_rf = rf.predict(x_test)

acc = accuracy_score(y_test,y_pred_rf)
classf = classification_report(y_test,y_pred_rf)
conf = confusion_matrix(y_test,y_pred_rf)
rec = recall_score(y_test,y_pred_rf)
pres =precision_score(y_test,y_pred_rf)

print(acc)
print(classf)
print(rec)
print(pres)
print(conf)

cdisplay=ConfusionMatrixDisplay(confusion_matrix=conf,display_labels=rf.classes_)
cdisplay.plot()