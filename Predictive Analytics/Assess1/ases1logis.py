# -*- coding: utf-8 -*-
"""ases1logis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HRTzVkDiHDCl-dwk5SgixQuRfvnVgWEx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,ConfusionMatrixDisplay

df=pd.read_csv('/content/booking.csv')

df.head()

df.info()

df.dtypes

df.shape

#handle missing values
df.isnull().sum()

medr = df['average price'].median()
df['average price'].fillna(medr,inplace=True)

df.isnull().sum()

# handle duplicates
df.duplicated().sum()

df.drop_duplicates(inplace=True)

# handle outliers
sns.boxplot(df['room type'])

sns.boxplot(df['average price'])

avg_count = df[df['average price']>200].count()

print(avg_count)

# categorical encoding

df = df.drop('Booking_ID',axis=1)

df.dtypes

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df['type of meal'] = le.fit_transform(df['type of meal'])
df['room type'] = le.fit_transform(df['room type'])
df['market segment type'] = le.fit_transform(df['market segment type'])
df['date of reservation'] = le.fit_transform(df['date of reservation'])
df['booking status'] = le.fit_transform(df['booking status'])

df

med = df['room type'].median()
df['room type'].fillna(med,inplace=True)

df.isnull().sum()

cor = df.corr()

cor
# pc not c npt needed

df = df.drop('P-not-C',axis=1)

sns.heatmap(cor,annot=True)

df.columns

# splitting of data
X= df[['number of adults', 'number of children', 'number of weekend nights',
       'number of week nights', 'type of meal', 'car parking space',
       'room type', 'lead time', 'market segment type', 'repeated', 'P-C',
       'average price', 'special requests', 'date of reservation', 'stype of meal']]
y = df['booking status']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)

#feature scaling
from sklearn.preprocessing import MinMaxScaler
sc =MinMaxScaler()

X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

lr = LogisticRegression()
lr.fit(X_train,y_train)

y_pred = lr.predict(X_test)

acc = accuracy_score(y_test,y_pred)
print(acc)